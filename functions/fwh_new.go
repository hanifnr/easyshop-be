package functions

import (
	"easyshop/model"
	"easyshop/utils"

	"gorm.io/gorm"
)

type FWhNew struct{}

func (f FWhNew) Run(m model.Model, db *gorm.DB) utils.StatusReturn {
	wh := m.(*model.Wh)

	listWhd := make([]*model.Whd, 0)
	db.Where("wh_id=?", wh.Id).Find(&listWhd)
	for _, whd := range listWhd {
		if err := db.Exec("UPDATE purcd SET qtywh = ?, imported = TRUE WHERE purc_id = ? AND dno = ?",
			whd.Qty, whd.PurcId, whd.PurcDno).Error; err != nil {
			return utils.StatusReturn{ErrCode: utils.ErrSQLSave, Message: err.Error()}
		}

		purcd := &model.Purcd{}
		db.Where("purc_id = ? AND dno = ?", whd.PurcId, whd.PurcDno).Find(&purcd)

		orderd := &model.Orderd{}
		db.Where("order_id = ? AND dno =?", purcd.OrderId, purcd.OrderDno).Find(&orderd)

		qtyWh := orderd.Qtywh + whd.Qty

		if orderd.Qty < qtyWh {
			return utils.StatusReturn{ErrCode: utils.ErrValidate, Message: "Qty warehouse over qty order!"}
		}

		if err := db.Exec("UPDATE orderd SET qtywh = ? WHERE order_id = ? AND dno = ?",
			qtyWh, purcd.OrderId, purcd.OrderDno).Error; err != nil {
			return utils.StatusReturn{ErrCode: utils.ErrSQLSave, Message: err.Error()}
		}

		//cek apabila item order sudah diimport ke wh semua set status IR
		var importedOrderWh int
		db.Select("COUNT(*)").Table("orderd").Where("order_id = ? AND qty <> qtywh", purcd.OrderId).Scan(&importedOrderWh)
		if importedOrderWh == 0 {
			if err := db.Exec("UPDATE public.order SET status_code = 'IR' WHERE id = ?", purcd.OrderId).Error; err != nil {
				return utils.StatusReturn{ErrCode: utils.ErrSQLSave, Message: err.Error()}
			}
			order := &model.Order{}
			db.Where("id = ?", purcd.OrderId).Find(&order)
			foln := &FOrderLogNew{
				Note: "generated by system",
			}
			foln.Run(order, db)
		}

		//Update status purc ke imported true apabila semua data telah diimport ke wh
		var importedPurc bool
		db.Select("COUNT(*) = 0").Table("purcd").Where("purc_id = ? AND qty <> qtywh", purcd.PurcId).Scan(&importedPurc)

		if err := db.Exec("UPDATE purc SET imported = ? WHERE id = ?", importedPurc, purcd.PurcId).Error; err != nil {
			return utils.StatusReturn{ErrCode: utils.ErrSQLSave, Message: err.Error()}
		}
	}

	return utils.StatusReturnOK()
}
