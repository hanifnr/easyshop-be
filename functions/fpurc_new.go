package functions

import (
	"easyshop/model"
	"easyshop/utils"

	"gorm.io/gorm"
)

type FPurcNew struct{}

func (f FPurcNew) Run(m model.Model, db *gorm.DB) utils.StatusReturn {
	purc := m.(*model.Purc)

	listPurcd := make([]*model.Purcd, 0)
	db.Where("purc_id=?", purc.Id).Find(&listPurcd)
	for _, purcd := range listPurcd {
		orderd := &model.Orderd{}
		db.Where("order_id = ? AND dno =?", purcd.OrderId, purcd.OrderDno).Find(&orderd)

		qtyPurc := orderd.Qtypurc + purcd.Qty
		if orderd.Qty < qtyPurc {
			return utils.StatusReturn{ErrCode: utils.ErrValidate, Message: "Qty purchasing over qty order!"}
		}

		imported := orderd.Qty == qtyPurc
		if err := db.Exec("UPDATE orderd SET qtypurc = ?, imported = ? WHERE order_id = ? AND dno = ?",
			qtyPurc, imported, purcd.OrderId, purcd.OrderDno).Error; err != nil {
			return utils.StatusReturn{ErrCode: utils.ErrSQLSave, Message: err.Error()}
		}
		var importedOrderPurc int
		db.Select("COUNT(*)").Table("orderd").Where("order_id = ? AND imported = FALSE", purcd.OrderId).Scan(&importedOrderPurc)
		if importedOrderPurc == 0 {
			if err := db.Exec("UPDATE public.order SET status_code = 'IC' WHERE id = ?", purcd.OrderId).Error; err != nil {
				return utils.StatusReturn{ErrCode: utils.ErrSQLSave, Message: err.Error()}
			}
			order := &model.Order{}
			db.Where("id = ?", purcd.OrderId).Find(&order)
			foln := &FOrderLogNew{
				Note: "generated by system",
			}
			foln.Run(order, db)
		} else {
			order := &model.Order{}
			db.Where("id = ?", purcd.OrderId).Find(&order)
			if order.StatusCode != "IP" {
				if err := db.Exec("UPDATE public.order SET status_code = 'IP' WHERE id = ?", purcd.OrderId).Error; err != nil {
					return utils.StatusReturn{ErrCode: utils.ErrSQLSave, Message: err.Error()}
				}
				order.StatusCode = "IP"
				foln := &FOrderLogNew{
					Note: "generated by system",
				}
				foln.Run(order, db)
			}
		}
	}
	return utils.StatusReturnOK()
}
